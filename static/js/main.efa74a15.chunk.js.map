{"version":3,"sources":["components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","selectTodo","isTodoSelected","className","map","todo","cn","id","completed","title","type","onClick","TodoFilter","selectedOption","setSelectedOption","searchQuery","setSearchQuery","value","onChange","event","target","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","getUser","userId","TodoModal","selectedTodo","setSelectedTodo","useState","user","setUser","isLoading","setIsLoading","loadUser","a","loadedUser","useEffect","href","email","name","App","setTodos","loadTodos","loadedTodos","visibleTodos","preparedTodos","preparedSearchQuery","toLowerCase","trim","filter","includes","filterTodos","todoId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.efa74a15.chunk.js","sourcesContent":["import React from 'react';\nimport cn from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[],\n  selectTodo: (todo: Todo) => void,\n  isTodoSelected: (id: number) => boolean,\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  selectTodo,\n  isTodoSelected,\n}) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {todos.map(todo => (\n        <tr\n          data-cy=\"todo\"\n          className={cn({\n            'has-background-info-light': isTodoSelected(todo.id),\n          })}\n          key={todo.id}\n        >\n          <td className=\"is-vcentered\">{todo.id}</td>\n          <td className=\"is-vcentered\">\n            {todo.completed && (\n              <span className=\"icon\" data-cy=\"iconCompleted\">\n                <i className=\"fas fa-check\" />\n              </span>\n            )}\n          </td>\n          <td className=\"is-vcentered is-expanded\">\n            <p className={cn({\n              'has-text-success': todo.completed,\n              'has-text-danger': !todo.completed,\n            })}\n            >\n              {todo.title}\n            </p>\n          </td>\n          <td className=\"has-text-right is-vcentered\">\n            <button\n              data-cy=\"selectButton\"\n              className=\"button\"\n              type=\"button\"\n              onClick={() => selectTodo(todo)}\n            >\n              <span className=\"icon\">\n                <i className={cn('far', {\n                  'fa-eye': !isTodoSelected(todo.id),\n                  'fa-eye-slash': isTodoSelected(todo.id),\n                })}\n                />\n              </span>\n            </button>\n          </td>\n        </tr>\n      ))}\n    </tbody>\n  </table>\n);\n","import { FC } from 'react';\n\ninterface Props {\n  selectedOption: string;\n  setSelectedOption: (option: string) => void;\n  searchQuery: string;\n  setSearchQuery: (query: string) => void;\n}\n\nexport const TodoFilter: FC<Props> = ({\n  selectedOption,\n  setSelectedOption,\n  searchQuery,\n  setSearchQuery,\n}) => {\n  const handleOptionChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setSelectedOption(event.target.value);\n  };\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchQuery(event.target.value);\n  };\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={selectedOption}\n            onChange={handleOptionChange}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={searchQuery}\n          onChange={handleInputChange}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {searchQuery\n          && (\n            /* eslint-disable-next-line jsx-a11y/control-has-associated-label */\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => setSearchQuery('')}\n            />\n          )}\n        </span>\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport cn from 'classnames';\nimport { Loader } from '../Loader';\nimport { getUser } from '../../api';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\n\ninterface Props {\n  selectedTodo: Todo;\n  setSelectedTodo: (todo: Todo | null) => void;\n}\n\nexport const TodoModal: React.FC<Props> = ({\n  selectedTodo,\n  setSelectedTodo,\n}) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  const {\n    id,\n    title,\n    completed,\n    userId,\n  } = selectedTodo;\n\n  const loadUser = async () => {\n    try {\n      const loadedUser = await getUser(userId);\n\n      setUser(loadedUser);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    loadUser();\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => setSelectedTodo(null)}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {title}\n            </p>\n\n            {user && (\n              <p className=\"block\" data-cy=\"modal-user\">\n                <strong className={cn({\n                  'has-text-success': completed,\n                  'has-text-danger': !completed,\n                })}\n                >\n                  {completed ? 'Done' : 'Planned'}\n                </strong>\n\n                {' by '}\n\n                <a href={`mailto:${user.email}`}>\n                  {user.name}\n                </a>\n              </p>\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { Todo } from './types/Todo';\nimport { getTodos } from './api';\n\nconst filterTodos = (todos: Todo[], selectedOption: string, searchQuery: string) => {\n  let preparedTodos = [...todos];\n\n  if (searchQuery) {\n    const preparedSearchQuery = searchQuery.toLowerCase().trim();\n\n    preparedTodos = preparedTodos.filter(todo => todo.title.toLowerCase().includes(preparedSearchQuery));\n  }\n\n  if (selectedOption === 'active') {\n    preparedTodos = preparedTodos.filter(todo => !todo.completed);\n  }\n\n  if (selectedOption === 'completed') {\n    preparedTodos = preparedTodos.filter(todo => todo.completed);\n  }\n\n  return preparedTodos;\n};\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n  const [selectedOption, setSelectedOption] = useState('all');\n  const [searchQuery, setSearchQuery] = useState('');\n\n  const selectTodo = (todo: Todo) => {\n    setSelectedTodo(todo);\n  };\n\n  const loadTodos = async () => {\n    try {\n      const loadedTodos = await getTodos();\n\n      setTodos(loadedTodos);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const isTodoSelected = (todoId: number) => todoId === selectedTodo?.id;\n\n  useEffect(() => {\n    loadTodos();\n  }, []);\n\n  const visibleTodos = filterTodos(todos, selectedOption, searchQuery);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                selectedOption={selectedOption}\n                setSelectedOption={setSelectedOption}\n                searchQuery={searchQuery}\n                setSearchQuery={setSearchQuery}\n              />\n            </div>\n\n            <div className=\"block\">\n              {!isLoading\n                ? <TodoList todos={visibleTodos} selectTodo={selectTodo} isTodoSelected={isTodoSelected} />\n                : <Loader />}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && <TodoModal selectedTodo={selectedTodo} setSelectedTodo={setSelectedTodo} />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}